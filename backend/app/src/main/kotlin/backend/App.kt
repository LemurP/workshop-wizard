/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package backend

import backend.admin.configureAdminRoutes
import backend.user.configureUserRoutes
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.server.plugins.contentnegotiation.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun server() = embeddedServer(factory = Netty, port = 8080) {
    configureAuth()
    configureRouting()
}

class CustomPrincipal(val userId: Int): Principal

fun Application.configureAuth() {
    install(Authentication) {

        basic ("basic"){
            realm = "Ktor Server"
            validate { credentials ->
                if (credentials.name == "user" && credentials.password == "password") {
                    CustomPrincipal(1)
                } else {
                    null
                }
            }
        }
    }
}


fun Application.configureRouting() {
    install(ContentNegotiation) {
        json()
    }
    configureUserRoutes()
    configureAdminRoutes()
    routing {
        get {
            call.respondText("Hello, world!")
        }
    }
}

fun main() {
    server().start(wait = true)
}
